--[[
    lvim is the global options object

    inters should be
    filled in as strings with either
    a global executable or a path to
    an executable
]]
-- THESE ARE EXAMPLE CONFIGS FEEL FREE TO CHANGE TO WHATEVER YOU WANT

-- general
lvim.log.level = "warn"
lvim.format_on_save = true
lvim.colorscheme = "monokai"

local set = vim.opt -- set options
set.tabstop = 4
set.softtabstop = 4
set.shiftwidth = 4


-- add a highlighted column
vim.opt.colorcolumn = "80"
vim.opt.cindent = true

lvim.builtin.lualine.theme = "gruvbox-material"
lvim.builtin.lualine.sections.lualine_y = { "spaces", {
    "fileformat",
    icons_enabled = true
}, "encoding", "filetype" }
lvim.builtin.lualine.sections.lualine_z = { "progress", "location" }
vim.g.tokyonight_style = "night"
vim.g.tokyonight_italic_functions = true
vim.g.tokyonight_sidebars = { "qf", "vista_kind", "terminal", "packer" }



-- keymappings [view all the defaults by pressing <leader>Lk]
lvim.leader = "space"
-- add your own keymapping

-- unmap a default keymapping
-- lvim.keys.normal_mode["<C-Up>"] = false
-- edit a default keymapping
-- lvim.keys.normal_mode["<C-q>"] = ":q<cr>"

vim.g.goyo_width = "80%"
lvim.keys.normal_mode["d"] = '"_d'
lvim.keys.normal_mode["D"] = '"_D'
lvim.keys.visual_mode["d"] = '"_d'
lvim.keys.normal_mode["<del>"] = '<C-G>"_x'
lvim.keys.visual_mode["p"] = 'pgvy'

lvim.keys.normal_mode["<C-w>t"] = "<cmd>Twilight<cr>"
lvim.keys.normal_mode["<C-w>z"] = "<cmd>:Goyo<CR>"

lvim.keys.visual_mode["p"] = '"_dp'
lvim.keys.visual_mode["P"] = '"_dP'



-- Change Telescope navigation to use j and k for navigation and n and p for history in both input and normal mode.
-- we use protected-mode (pcall) just in case the plugin wasn't loaded yet.
local _, actions = pcall(require, "telescope.actions")
lvim.builtin.telescope.defaults.mappings = {
    -- for input mode
    i = {
        ["<C-j>"] = actions.move_selection_next,
        ["<C-k>"] = actions.move_selection_previous,
        ["<C-n>"] = actions.cycle_history_next,
        ["<C-p>"] = actions.cycle_history_prev,
    },
    -- for normal mode
    n = {
        ["<C-j>"] = actions.move_selection_next,
        ["<C-k>"] = actions.move_selection_previous,
    },
}


-- Use which-key to add extra bindings with the leader-key prefix


lvim.builtin.which_key.mappings["P"] = { "<cmd>Telescope projects<CR>", "Projects" }

lvim.builtin.which_key.mappings["g"] = false
lvim.builtin.which_key.mappings["g"] = {
    name = "+Git",
    a = { "<cmd>Git add %:p<CR><CR>", "Add" },
    s = { "<cmd>Git<CR>", "Status" },
    c = { "<cmd>Git commit -v -q<CR>", "Commit" },
    d = { "<cmd>Git diff<CR>", "Diff" },
    e = { "<cmd>Git edit<CR>", "Edit" },
    r = { "<cmd>Git read<CR>", "Read" },
    w = { "<cmd>Git write<CR><CR>", "Write" },
    l = { "<cmd>silent! Gclog<CR>:bot copen<CR>", "clog" },
    p = { "<cmd>Ggrep<Space>", "Grep" },
    m = { "<cmd>Gmove<Space>", "Move" },
    b = { "<cmd>Git branch<Space>", "Branch" },
    o = { "<cmd>Git checkout<Space><CR>", "Checkout" },
    ps = { "<cmd>Dispatch! git push<CR>", "Push" },
    pl = { "<cmd>Dispatch! git pull<CR>", "Pull" },
    g = {
        name = "+GitHub",
        i = { "<cmd>Octo issue list<cr>", "Issues" },
        p = { "<cmd>Octo pr list<cr>", "PR" },
    }
}

lvim.builtin.which_key.mappings["u"] = {
    name = "+Code",
    d = {
        name = "+Debug",
        U = { ":lua require'dapui'.toggle()<cr>", "Open dapui" },
    },
    t = {
        name = "+Tests",
        t = { "<cmd>TestNearest<cr>", "Test nearest method" },
        f = { "<cmd>TestFile<cr>", "Test file" },
        a = { "<cmd>TestSuite<cr>", "Test suite" },
        l = { "<cmd>TestLast<cr>", "Test last" },
        g = { "<cmd>TestVisit<cr>", "Test visited" },
        s = { "<cmd>PHPUnitSwitchFile<cr>", "Switch to test/src class" },
    },
    f = {
        name = "+php-cs-fixer",
        d = { "<cmd>call PhpCsFixerFixDirectory()<CR>", "Fix directory" },
        f = { "<cmd>call PhpCsFixerFixFile()<CR>", "Fix file" },
    }

}


lvim.builtin.which_key.mappings["T"] = {
    name = "+Trouble",
    r = { "<cmd>Trouble lsp_references<cr>", "References" },
    f = { "<cmd>Trouble lsp_definitions<cr>", "Definitions" },
    d = { "<cmd>Trouble document_diagnostics<cr>", "Diagnostics" },
    q = { "<cmd>Trouble quickfix<cr>", "QuickFix" },
    l = { "<cmd>Trouble loclist<cr>", "LocationList" },
    w = { "<cmd>Trouble workspace_diagnostics<cr>", "Diagnostics" },
}

-- TODO: User Config for predefined plugins
-- After changing plugin config exit and reopen LunarVim, Run :PackerInstall :PackerCompile
lvim.builtin.alpha.active = true
lvim.builtin.alpha.mode = "dashboard"
lvim.builtin.notify.active = true
lvim.builtin.terminal.active = true
lvim.builtin.nvimtree.setup.view.side = "left"
lvim.builtin.nvimtree.show_icons.git = 0
lvim.builtin.nvimtree.setup.actions.open_file.resize_window = true
lvim.builtin.dap.active = true

-- if you don't want all the parsers change this to a table of the ones you want
lvim.builtin.treesitter.ensure_installed = {
    "bash",
    "c",
    "javascript",
    "json",
    "lua",
    "python",
    "typescript",
    "tsx",
    "css",
    "rust",
    "java",
    "yaml",
    "php",
}

lvim.builtin.treesitter.ignore_install = { "haskell" }
lvim.builtin.treesitter.highlight.enabled = true


lvim.builtin.treesitter.textobjects = {
    select = {
        enable = true,
        -- Automatically jump forward to textobj, similar to targets.vim
        lookahead = true,

        keymaps = {
            -- You can use the capture groups defined in textobjects.scm
            ["af"] = "@function.outer",
            ["if"] = "@function.inner",
            ["ac"] = "@class.outer",
            ["ic"] = "@class.inner",
        },
    },
    swap = {
        enable = false,
        swap_next = {
            ["<leader>a"] = "@parameter.inner",
        },
        swap_previous = {
            ["<leader>A"] = "@parameter.inner",
        },
    },
    move = {
        enable = true,
        set_jumps = true, -- whether to set jumps in the jumplist
        goto_next_start = {
            ["]m"] = "@function.outer",
            ["]["] = "@class.outer",
        },
        goto_next_end = {
            ["]M"] = "@function.outer",
            ["]]"] = "@class.outer",
        },
        goto_previous_start = {
            ["[m"] = "@function.outer",
            ["[["] = "@class.outer",
        },
        goto_previous_end = {
            ["[M"] = "@function.outer",
            ["[]"] = "@class.outer",
        },
    },
}

-- Add lables to the textobjects keybindings
-- lvim.builtin.which_key.on_config_done = function()({
--   ["[["] = { "Previous class start"},
--   ["[]"] = { "Previous class end"},
--   ["]]"] = { "Next class end"},
--   ["]["] = { "Next class start"},
--   ["<leader>a"] = { "Swap w/next param" },
--   ["<leader>A"] = { "Swap w/prev param" }
-- })
-- generic LSP settings

-- ---@usage disable automatic installation of servers
-- lvim.lsp.automatic_servers_installation = false

-- ---@usage Select which servers should be configured manually. Requires `:LvimCacheReset` to take effect.
-- See the full default list `:lua print(vim.inspect(lvim.lsp.override))`
-- vim.list_extend(lvim.lsp.override, { "phpactor" })

-- ---@usage setup a server -- see: https://www.lunarvim.org/languages/#overriding-the-default-configuration
-- local opts = {} -- check the lspconfig documentation for a list of all possible options
-- require("lvim.lsp.manager").setup("pylsp", opts)

-- -- you can set a custom on_attach function that will be used for all the language servers
-- -- See <https://github.com/neovim/nvim-lspconfig#keybindings-and-completion>
-- lvim.lsp.on_attach_callback = function(client, bufnr)
--   local function buf_set_option(...)
--     vim.api.nvim_buf_set_option(bufnr, ...)
--   end
--   --Enable completion triggered by <c-x><c-o>
--   buf_set_option("omnifunc", "v:lua.vim.lsp.omnifunc")
-- end

-- -- set a formatter, this will override the language server formatting capabilities (if it exists)
local formatters = require "lvim.lsp.null-ls.formatters"
formatters.setup {
    { command = "phpcsfixer", filetypes = { "php" } },
    { command = "markdownlint", filetypes = { "markdown" } },
    --   { command = "isort", filetypes = { "python" } },
    --   {
    --     -- each formatter accepts a list of options identical to https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md#Configuration
    --     command = "prettier",
    --     ---@usage arguments to pass to the formatter
    --     -- these cannot contain whitespaces, options such as `--line-width 80` become either `{'--line-width', '80'}` or `{'--line-width=80'}`
    --     extra_args = { "--print-with", "100" },
    --     ---@usage specify which filetypes to enable. By default a providers will attach to all the filetypes it supports.
    --     filetypes = { "typescript", "typescriptreact" },
    --   },
}

-- -- set additional linters
local linters = require "lvim.lsp.null-ls.linters"
linters.setup {
    { command = "phpstan", filetypes = { "php" } },
    { command = "twigcs" },
    --   {
    --     -- each linter accepts a list of options identical to https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md#Configuration
    --     command = "shellcheck",
    --     ---@usage arguments to pass to the formatter
    --     -- these cannot contain whitespaces, options such as `--line-width 80` become either `{'--line-width', '80'}` or `{'--line-width=80'}`
    --     extra_args = { "--severity", "warning" },
    --   },
    --   {
    --     command = "codespell",
    --     ---@usage specify which filetypes to enable. By default a providers will attach to all the filetypes it supports.
    --     filetypes = { "javascript", "python" },
    --   },
}

-- DAP

local dap = require('dap')
dap.adapters.php = {
    type = 'executable',
    command = 'node',
    args = { '/Users/kreemer/.local/vscode-php-debug/out/phpDebug.js' }
}

dap.configurations.php = {
    {
        type = 'php',
        request = 'launch',
        name = 'Listen for Xdebug',
        port = 9003
    }
}



-- Additional Plugins
lvim.plugins = {
    -- General
    { "reedes/vim-lexical" },
    {
        "AckslD/nvim-neoclip.lua",
        requires = {
            { 'tami5/sqlite.lua', module = 'sqlite' },
            { 'nvim-telescope/telescope.nvim' },
        },
        config = function()
            require('neoclip').setup()
        end,
    },
    {
        "tpope/vim-fugitive",
        cmd = {
            "G",
            "Git",
            "Gdiffsplit",
            "Gread",
            "Gwrite",
            "Ggrep",
            "GMove",
            "GDelete",
            "GBrowse",
            "GRemove",
            "GRename",
            "Glgrep",
            "Gedit"
        },
        ft = { "fugitive" }
    },
    {
        "pwntester/octo.nvim",
        requires = {
            'nvim-lua/plenary.nvim',
            'nvim-telescope/telescope.nvim',
            'kyazdani42/nvim-web-devicons',
        },
        config = function()
            require "octo".setup()
        end
    },
    {
        "folke/trouble.nvim",
        requires = "kyazdani42/nvim-web-devicons",
        config = function()
            require("trouble").setup {
                -- your configuration comes here
                -- or leave it empty to use the default settings
                -- refer to the configuration section below
            }
        end
    },
    {
        "ggandor/lightspeed.nvim"
    },
    -- UI
    { "tanvirtin/monokai.nvim" },
    { "junegunn/goyo.vim" },
    {
        "folke/twilight.nvim",
        config = function()
            require("twilight").setup {
                context = 12,
            }
        end
    },
    {
        "lukas-reineke/indent-blankline.nvim",
        config = function()
            require("plugins.indent_blankline").config()
        end
    },
    -- Treesitter
    {
        "nvim-treesitter/playground",
        event = "BufRead",
    },
    {
        "romgrk/nvim-treesitter-context",
        config = function()
            require("treesitter-context").setup {
                enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
                throttle = true, -- Throttles plugin updates (may improve performance)
                max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
                patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.
                    -- For all filetypes
                    -- Note that setting an entry here replaces all other patterns for this entry.
                    -- By setting the 'default' entry below, you can control which nodes you want to
                    -- appear in the context window.
                    default = {
                        'class',
                        'function',
                        'method',
                    },
                },
            }
        end
    },
    {
        "nvim-treesitter/nvim-treesitter-textobjects"
    },
    -- PHP
    {
        "vim-test/vim-test",
        setup = function()
            vim.cmd([[
                    let test#strategy = "neovim"
                    let test#php#phpunit#executable = 'SYMFONY_DEPRECATIONS_HELPER=verbose=0 phpunit'
            ]])
        end
    },
    { "kreemer/vim-phpunit" },
    {
        "stephpy/vim-php-cs-fixer",
        setup = function()
            vim.g.php_cs_fixer_enable_default_mapping = 0
        end
    },
    -- Markdown -------------------------------------------------------------------------
    { "ellisonleao/glow.nvim" },
    -- Twig -----------------------------------------------------------------------------
    { "nelsyeung/twig.vim" },
    -- LSP & DAP ------------------------------------------------------------------------
    {
        "rcarriga/nvim-dap-ui",
        config = function()
            require("dapui").setup()
        end,
        ft = { "php" },
        event = "BufReadPost",
        -- requires = { "mfussenegger/nvim-dap" },
        disable = not lvim.builtin.dap.active,
    },
    {
        "ray-x/lsp_signature.nvim",
        event = "BufRead",
        config = function()
            require "lsp_signature".setup()
        end
    },
}

require("luasnip.loaders.from_vscode").lazy_load()
require("luasnip.loaders.from_vscode").load({ paths = "~/Code/kreemer/vs-code-snippets" })
